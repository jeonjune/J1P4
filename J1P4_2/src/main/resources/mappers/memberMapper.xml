<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

  <mapper namespace="com.itwillbs.mapper.MemberMapper">
  
  <resultMap type="com.itwillbs.domain.RegistrationVO" id="RegistrationMap">
  	<id property="registration_no" column="registration_no"/>
	  	<result property="registration_date" column="registration_date"/>
	  	<result property="schedule_no" column="schedule_no"/>
	  	<result property="mem_no" column="mem_no"/>
	  	<result property="class_count" column="class_count"/>
	  	<collection property="memList" resultMap="MemberMap"></collection>
	  	<collection property="classScheduleList" resultMap="ClassScheduleMap"></collection>
  </resultMap>
  
  <resultMap type="com.itwillbs.domain.MemberVO" id="MemberMap">
  	<id property="mem_no" column="mem_no"/>
  </resultMap>
  
  <resultMap type="com.itwillbs.domain.ClassVO" id="ClassMap">
  	<id property="classNo" column="class_no"/>
        <result property="className" column="class_name"/>
        <result property="description" column="description"/>
        <result property="fieldCode" column="field_code"/>
        <result property="divisionCode" column="division_code"/>
        <result property="levelCode" column="level_code"/>
        <result property="minCapacity" column="min_capacity"/>
        <result property="maxCapacity" column="max_capacity"/>
        <result property="currentEnrollment" column="current_enrollment"/>
        <result property="instructorNo" column="instructor_no"/>
        <result property="instructorName" column="instructor_name"/>
  </resultMap>
  
  <resultMap type="com.itwillbs.domain.ClassScheduleVO" id="ClassScheduleMap">
  	 <id property="scheduleId" column="schedule_id"/>
        <result property="classNo" column="class_no"/>
        <result property="startDate" column="start_date"/>
        <result property="endDate" column="end_date"/>
        <result property="startTimeCode" column="start_time_code"/>
        <result property="endTimeCode" column="end_time_code"/>
        <result property="recurrencePattern" column="recurrence_pattern"/>
        <result property="recurrenceDays" column="recurrence_days"/>
        <result property="status" column="status"/>
        <collection property="classList" resultMap="ClassMap"></collection>
  </resultMap>
	
	<!-- 게시판 글 목록 ( 페이징 처리 1 ) -->
	<select id="listPage" resultType="MemberVO">
		<![CDATA[
			select * from member
			where mem_no > 0 and mem_delete is null
			order by mem_no desc, reg_date desc
			limit #{page},10
		]]>		
	</select>
	
	<!-- 게시판 글 목록 ( 페이징 처리 2 ) -->
	<select id="listPage2" resultType="MemberVO">
		<![CDATA[
			SELECT *, CONCAT(
	        SUBSTRING(mem_phone, 1, 3), '-',
	        SUBSTRING(mem_phone, 4, 4), '-',
	        SUBSTRING(mem_phone, 8, 4)
   			) AS formatted_mem_phone FROM member
			where mem_no > 0 and mem_delete is null
			order by mem_no desc, reg_date desc
			limit #{pageStart},${pageSize}
		]]>		
	</select>
	
	<!-- 게시판 총 글의 개수(페이징처리) -->
	<select id="totalCount" resultType="int">
		select count(mem_no) from member
		where mem_delete is null
	</select>
	
	<select id="readMem" resultType="MemberVO">
		SELECT *, CONCAT(
	        SUBSTRING(mem_phone, 1, 3), '-',
	        SUBSTRING(mem_phone, 4, 4), '-',
	        SUBSTRING(mem_phone, 8, 4)
   			) AS formatted_mem_phone FROM member
		where mem_no = #{mem_no};
	</select>
	
	 <!-- 회원등록 -->
  	 <insert id="memJoin" >
  	 	insert into member (mem_name, mem_birth, mem_gender, mem_phone, sms_opt, mem_email, email_opt, mem_note, mem_addr1, mem_addr2) 
 		values(#{mem_name}, #{mem_birth}, #{mem_gender}, #{mem_phone}, #{sms_opt}, #{mem_email}, #{email_opt}, #{mem_note}, #{mem_addr1}, #{mem_addr2})
  	 </insert>
  	 
  	 <!-- 회원 수정 -->
  	 <update id="memUpdate">
  	 	update member set mem_name = #{mem_name}, mem_birth=#{mem_birth}, mem_phone=#{mem_phone},
		sms_opt=#{sms_opt}, mem_email=#{mem_email}, email_opt=#{email_opt}, mem_note=#{mem_note},
		mem_addr1=#{mem_addr1}, mem_addr2=#{mem_addr2}
		where mem_no = #{mem_no};
  	 </update>
  	 
  	 <!-- 회원 삭제 -->
  	 <update id="memDelete" parameterType="list">
  	 	update member set mem_delete = now()
		WHERE mem_no IN
	    <foreach item="mem_no" collection="mem_no" open="(" separator="," close=")">
	        #{mem_no}
	    </foreach>
  	 </update>
  	 
  	 <!-- 회원 번호 조회 -->
  	 <select id="memPhone" resultType="MemberVO">
  	 	select mem_name, mem_phone, sms_opt, 
  	 	CONCAT(
	        SUBSTRING(mem_phone, 1, 3), '-',
	        SUBSTRING(mem_phone, 4, 4), '-',
	        SUBSTRING(mem_phone, 8, 4)
   		) AS formatted_mem_phone from member
		WHERE sms_opt = 1 and mem_no IN
	    <foreach item="mem_no" collection="mem_no" open="(" separator="," close=")">
	        #{mem_no}
	    </foreach>
  	 </select>
  	 
  	 <!-- 메시지 전송 내역 조회 -->
  	 <select id="selectSMS" resultType="RecipientVO">
	  	 select n.noti_no,n.sender_user,n.noti_type,n.message,n.noti_date,
		 Left(group_concat(CONCAT(
		        SUBSTRING(r.recipient_mem, 1, 3), '-',
		        SUBSTRING(r.recipient_mem, 4, 4), '-',
		        SUBSTRING(r.recipient_mem, 8, 4)
	   			) separator ', '),43) as recipient_mem,
		 substring(group_concat(CONCAT(
		        SUBSTRING(r.recipient_mem, 1, 3), '-',
		        SUBSTRING(r.recipient_mem, 4, 4), '-',
		        SUBSTRING(r.recipient_mem, 8, 4)
	   			) separator ', '),44) as recipient_more,
		 COUNT(r.recipient_mem)-3 as recipient_count            
		 from notification n left join recipient r
		 on n.noti_no = r.noti_no
		 group by n.noti_no
		 order by n.noti_no desc
		 limit #{pageStart},${pageSize}
  	 </select>
  	 
  	 <!-- 메시지 총 개수(페이징처리) -->
	<select id="totalSMS" resultType="int">
		select count(noti_no) from notification
	</select>
	
	<!-- 과목별 수강회수 조회 -->
	<select id="countClass" resultType="map">
		SELECT class_status, m.mem_no, field_code, COUNT(field_code) as class_count
	    FROM registration r
		JOIN member m ON m.mem_no = r.mem_no
		JOIN classSchedule cs ON cs.schedule_id = r.schedule_no
		JOIN class c ON c.class_no = cs.class_no
		WHERE m.mem_no = #{mem_no} and (status = '종료')
		GROUP BY m.mem_no, field_code
	</select>
	
	<!-- 선택한 과목에 대한 상세내용 출력 -->
	<select id="detailClass" resultMap="RegistrationMap">
		select m.mem_no, r.registration_date, field_code, description,level_code,
	    class_name,division_code,max_capacity,instructor_no,min_capacity,
	    start_date, end_date, recurrence_days, start_time_code, end_time_code
		from registration r
		join member m
		on m.mem_no = r.mem_no
		join classSchedule cs
		on cs.schedule_id = r.schedule_no
		join class c
		on c.class_no = cs.class_no
		<where>
	        m.mem_no = #{mem_no}
	        <if test="status == '종료'">
	            and field_code = #{fieldCode}
	            and status = #{status}
	        </if>
	        <if test="status == '정상' or status == '모집'">
	            and status = #{status}
	        </if>
	    </where>
	    <if test="status == '정상'">
	        <if test="pageNormal != null">
	            limit #{pageNormal}, 1
	        </if>
	    </if>
	    <if test="status == '모집'">
	        <if test="pageRecruit != null">
	            limit #{pageRecruit}, 1
	        </if>
	    </if>
	</select>
	
	<!-- 수강 중 또는 수강신청 강의 총 개수(페이징처리) -->
	<select id="totalDetailClass" resultType="int">
		select count(m.mem_no) as class_count
		from registration r
		join member m
		on m.mem_no = r.mem_no
		join classSchedule cs
		on cs.schedule_id = r.schedule_no
		join class c
		on c.class_no = cs.class_no
	    where m.mem_no = #{mem_no} and status = #{status}
	</select>
  	 
  </mapper>